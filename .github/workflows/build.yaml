name: builder

on:
  push:
    branches:
      - 'main'
      - 'release-*'
  pull_request:
    branches:
      - 'main'
      - 'release-*'

env:
  CONTAINER_REGISTRY: ghcr.io
  TRIVY_IGNORE_UNFIXED: true
  TRIVY_VULN_TYPE: 'os,library'
  TRIVY_SEVERITY: 'CRITICAL,HIGH'

defaults:
  run:
    shell: bash

jobs:

  # prepare_ci_run gathers info about the commit
  prepare_ci_run:
    name: Prepare CI Run
    runs-on: ubuntu-20.04
    outputs: # declare what this job outputs (so it can be re-used for other jobs)
      GIT_SHA: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      PUSH_IMAGE: ${{ steps.get_version.outputs.PUSH_IMAGE }}
      DATE: ${{ steps.get_datetime.outputs.DATE }}
      TIME: ${{ steps.get_datetime.outputs.TIME }}
      DATETIME: ${{ steps.get_datetime.outputs.DATETIME }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # need to checkout "all commits" for certain features to work (e.g., get all changed files)
      - name: Extract branch name
        id: extract_branch
        uses: keptn/gh-action-extract-branch-name@main
      - name: 'Get Previous tag'
        id: get_previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1.1"
        with:
          fallback: "0.0.1"
      - name: 'Get next patch version'
        id: get_next_semver_tag
        uses: "WyriHaximus/github-action-next-semvers@v1.1"
        with:
          version: ${{ steps.get_previous_tag.outputs.tag }}
      - name: Get the version
        id: get_version
        env:
          BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
          BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
        shell: bash
        run: |
          # determine version
          GIT_LAST_TAG=${{ steps.get_previous_tag.outputs.tag }}
          GIT_NEXT_TAG=${{ steps.get_next_semver_tag.outputs.patch }}
          echo "GIT_LAST_TAG=${GIT_LAST_TAG}, GIT_NEXT_TAG=${GIT_NEXT_TAG}"

          if [[ "$BRANCH" == "release-"* ]]; then
            # Release Branch: extract version from branch name
            VERSION=${BRANCH#"release-"}
            else
            if [[ "$BRANCH" == "master" ]]; then
              # master branch = latest-dev
              VERSION="${GIT_NEXT_TAG}-dev"
            else
              # Feature/Development Branch - use last tag with branch slug
              VERSION="${GIT_NEXT_TAG}-dev-${BRANCH_SLUG}"
            fi
          fi

          echo "VERSION=${VERSION}"

          echo "##[set-output name=VERSION;]$(echo ${VERSION})"
      - name: Get current date and time
        id: get_datetime
        run: |
          echo "::set-output name=DATE::$(date +'%Y%m%d')"
          echo "::set-output name=TIME::$(date +'%H%M')"
          echo "::set-output name=DATETIME::$(date +'%Y%m%d')$(date +'%H%M')"

  ## lint_go_code statically analyzes go code in the commit
  lint_go_code:
    strategy:
      matrix:
        component: [ "left-leg", "right-leg", "left-arm", "right-arm", "hats", "main" ]
        version: [ "v1", "v2", "v3", "v4" ]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
          working-directory: podtato-services/${{ matrix.component }}

  ##  container_build builds and pushes images for any fork
  container_build:
    needs: [prepare_ci_run, lint_go_code]
    strategy:
      matrix:
        component: [ "left-leg", "right-leg", "left-arm", "right-arm", "hats", "main" ]
        version: [ "v1", "v2", "v3", "v4" ]
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
      - name: Build image and push to current fork
        id: docker_build_fork
        uses: docker/build-push-action@v2
        with:
          build-args: |
            VERSION=${{ matrix.version }}
          context: podtato-services/${{ matrix.component }}/.
          file: podtato-services/${{ matrix.component }}/docker/Dockerfile
          platforms: linux/amd64
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}/podtato-head/podtato-${{ matrix.component }}:${{ matrix.version}}-latest-dev
            ${{ env.CONTAINER_REGISTRY }}/${{ github.repository_owner }}/podtato-head/podtato-${{ matrix.component }}:${{ matrix.version}}-${{ env.VERSION }}

  ## container_build_main builds, signs, pushes, and scans images from main repo
  ## the repo path targeted by container_build_main doesn't include `cncf` in
  ##   the path like the path for container_build
  container_build_main:
    if: github.repository_owner == 'cncf'
    needs: [prepare_ci_run,lint_go_code]
    strategy:
      matrix:
        component: [ "left-leg", "right-leg", "left-arm", "right-arm", "hats", "main" ]
        version: [ "v1", "v2", "v3", "v4" ]
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.0.0'
      - name: Login to GitHub Container Registry
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release-*' }}
        uses: docker/login-action@v1
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build for main
        id: docker_build_main
        uses: docker/build-push-action@v2
        with:
          build-args: |
            VERSION=${{ matrix.version }}
          context: podtato-services/${{ matrix.component }}/.
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release-*' }}
          file: podtato-services/${{ matrix.component }}/docker/Dockerfile
          platforms: linux/amd64
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/podtato-head/podtato-${{ matrix.component }}:${{ matrix.version}}-latest-dev
            ${{ env.CONTAINER_REGISTRY }}/podtato-head/podtato-${{ matrix.component }}:${{ matrix.version}}-${{ env.VERSION }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.CONTAINER_REGISTRY }}/podtato-head/podtato-${{ matrix.component }}:${{ matrix.version}}-${{ env.VERSION }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: '${{ env.TRIVY_IGNORE_UNFIXED }}'
          vuln-type: '${{ env.TRIVY_VULN_TYPE }}'
          severity: '${{ env.TRIVY_SEVERITY }}'
      - name: Sign Container
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release-*' }}
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: cosign sign -key .github/workflows/cosign.key -a GIT_HASH=${{ env.GIT_SHA }} -a VERSION=${{ needs.prepare_ci_run.outputs.VERSION }} ${{ env.CONTAINER_REGISTRY }}/podtato-head/podtato-${{ matrix.component }}:${{ matrix.version}}-${{ env.VERSION }}

  ## test kubectl
  test_kubectl_delivery:
    name: Deliver with kubectl
    needs: [prepare_ci_run, container_build]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release-*' }}
    env:
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
      - name: Test delivery with kubectl
        run: ./delivery/kubectl/test.sh "${{ github.repository_owner }}" "${{ github.token }}" "${{ env.VERSION }}"
 
  ## test helm
  test_helm_delivery:
    name: Deliver with Helm
    needs: [prepare_ci_run, container_build]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release-*' }}
    env:
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Create kind cluster
        uses: helm/kind-action@v1.2.0
      - name: Test delivery with helm
        run: ./delivery/chart/test.sh "${{ github.repository_owner }}" "${{ github.token }}" "${{ env.VERSION }}"
